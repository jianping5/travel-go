// Code generated by goctl. DO NOT EDIT.
// Source: data.proto

package data

import (
	"context"

	"travel/app/data/cmd/rpc/pb/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AnalyzeUserBehaviorReq  = pb.AnalyzeUserBehaviorReq
	AnalyzeUserBehaviorResp = pb.AnalyzeUserBehaviorResp
	ContentSimilarReq       = pb.ContentSimilarReq
	ContentSimilarResp      = pb.ContentSimilarResp
	ContentTagCreateReq     = pb.ContentTagCreateReq
	ContentTagCreateResp    = pb.ContentTagCreateResp
	UpdateUserTagReq        = pb.UpdateUserTagReq
	UpdateUserTagResp       = pb.UpdateUserTagResp
	UserLikeContentReq      = pb.UserLikeContentReq
	UserLikeContentResp     = pb.UserLikeContentResp

	Data interface {
		ContentSimilar(ctx context.Context, in *ContentSimilarReq, opts ...grpc.CallOption) (*ContentSimilarResp, error)
		UserLikeContent(ctx context.Context, in *UserLikeContentReq, opts ...grpc.CallOption) (*UserLikeContentResp, error)
		ContentTagCreate(ctx context.Context, in *ContentTagCreateReq, opts ...grpc.CallOption) (*ContentTagCreateResp, error)
		AnalyzeUserBehavior(ctx context.Context, in *AnalyzeUserBehaviorReq, opts ...grpc.CallOption) (*AnalyzeUserBehaviorResp, error)
		UpdateUserTag(ctx context.Context, in *UpdateUserTagReq, opts ...grpc.CallOption) (*UpdateUserTagResp, error)
	}

	defaultData struct {
		cli zrpc.Client
	}
)

func NewData(cli zrpc.Client) Data {
	return &defaultData{
		cli: cli,
	}
}

func (m *defaultData) ContentSimilar(ctx context.Context, in *ContentSimilarReq, opts ...grpc.CallOption) (*ContentSimilarResp, error) {
	client := pb.NewDataClient(m.cli.Conn())
	return client.ContentSimilar(ctx, in, opts...)
}

func (m *defaultData) UserLikeContent(ctx context.Context, in *UserLikeContentReq, opts ...grpc.CallOption) (*UserLikeContentResp, error) {
	client := pb.NewDataClient(m.cli.Conn())
	return client.UserLikeContent(ctx, in, opts...)
}

func (m *defaultData) ContentTagCreate(ctx context.Context, in *ContentTagCreateReq, opts ...grpc.CallOption) (*ContentTagCreateResp, error) {
	client := pb.NewDataClient(m.cli.Conn())
	return client.ContentTagCreate(ctx, in, opts...)
}

func (m *defaultData) AnalyzeUserBehavior(ctx context.Context, in *AnalyzeUserBehaviorReq, opts ...grpc.CallOption) (*AnalyzeUserBehaviorResp, error) {
	client := pb.NewDataClient(m.cli.Conn())
	return client.AnalyzeUserBehavior(ctx, in, opts...)
}

func (m *defaultData) UpdateUserTag(ctx context.Context, in *UpdateUserTagReq, opts ...grpc.CallOption) (*UpdateUserTagResp, error) {
	client := pb.NewDataClient(m.cli.Conn())
	return client.UpdateUserTag(ctx, in, opts...)
}
