// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: social.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Social_MessageCreate_FullMethodName   = "/pb.Social/MessageCreate"
	Social_CopyrightDetail_FullMethodName = "/pb.Social/CopyrightDetail"
	Social_ContentSimple_FullMethodName   = "/pb.Social/ContentSimple"
	Social_ContentDelete_FullMethodName   = "/pb.Social/ContentDelete"
)

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialClient interface {
	MessageCreate(ctx context.Context, in *MessageCreateReq, opts ...grpc.CallOption) (*MessageCreateResp, error)
	CopyrightDetail(ctx context.Context, in *CopyrightDetailReq, opts ...grpc.CallOption) (*CopyrightDetailResp, error)
	ContentSimple(ctx context.Context, in *ContentSimpleReq, opts ...grpc.CallOption) (*ContentSimpleResp, error)
	ContentDelete(ctx context.Context, in *ContentDeleteReq, opts ...grpc.CallOption) (*ContentDeleteResp, error)
}

type socialClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialClient(cc grpc.ClientConnInterface) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) MessageCreate(ctx context.Context, in *MessageCreateReq, opts ...grpc.CallOption) (*MessageCreateResp, error) {
	out := new(MessageCreateResp)
	err := c.cc.Invoke(ctx, Social_MessageCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CopyrightDetail(ctx context.Context, in *CopyrightDetailReq, opts ...grpc.CallOption) (*CopyrightDetailResp, error) {
	out := new(CopyrightDetailResp)
	err := c.cc.Invoke(ctx, Social_CopyrightDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ContentSimple(ctx context.Context, in *ContentSimpleReq, opts ...grpc.CallOption) (*ContentSimpleResp, error) {
	out := new(ContentSimpleResp)
	err := c.cc.Invoke(ctx, Social_ContentSimple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ContentDelete(ctx context.Context, in *ContentDeleteReq, opts ...grpc.CallOption) (*ContentDeleteResp, error) {
	out := new(ContentDeleteResp)
	err := c.cc.Invoke(ctx, Social_ContentDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
// All implementations must embed UnimplementedSocialServer
// for forward compatibility
type SocialServer interface {
	MessageCreate(context.Context, *MessageCreateReq) (*MessageCreateResp, error)
	CopyrightDetail(context.Context, *CopyrightDetailReq) (*CopyrightDetailResp, error)
	ContentSimple(context.Context, *ContentSimpleReq) (*ContentSimpleResp, error)
	ContentDelete(context.Context, *ContentDeleteReq) (*ContentDeleteResp, error)
	mustEmbedUnimplementedSocialServer()
}

// UnimplementedSocialServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServer struct {
}

func (UnimplementedSocialServer) MessageCreate(context.Context, *MessageCreateReq) (*MessageCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageCreate not implemented")
}
func (UnimplementedSocialServer) CopyrightDetail(context.Context, *CopyrightDetailReq) (*CopyrightDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyrightDetail not implemented")
}
func (UnimplementedSocialServer) ContentSimple(context.Context, *ContentSimpleReq) (*ContentSimpleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContentSimple not implemented")
}
func (UnimplementedSocialServer) ContentDelete(context.Context, *ContentDeleteReq) (*ContentDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContentDelete not implemented")
}
func (UnimplementedSocialServer) mustEmbedUnimplementedSocialServer() {}

// UnsafeSocialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServer will
// result in compilation errors.
type UnsafeSocialServer interface {
	mustEmbedUnimplementedSocialServer()
}

func RegisterSocialServer(s grpc.ServiceRegistrar, srv SocialServer) {
	s.RegisterService(&Social_ServiceDesc, srv)
}

func _Social_MessageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).MessageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_MessageCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).MessageCreate(ctx, req.(*MessageCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CopyrightDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyrightDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CopyrightDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_CopyrightDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CopyrightDetail(ctx, req.(*CopyrightDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ContentSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentSimpleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ContentSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ContentSimple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ContentSimple(ctx, req.(*ContentSimpleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ContentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ContentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Social_ContentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ContentDelete(ctx, req.(*ContentDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Social_ServiceDesc is the grpc.ServiceDesc for Social service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Social_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageCreate",
			Handler:    _Social_MessageCreate_Handler,
		},
		{
			MethodName: "CopyrightDetail",
			Handler:    _Social_CopyrightDetail_Handler,
		},
		{
			MethodName: "ContentSimple",
			Handler:    _Social_ContentSimple_Handler,
		},
		{
			MethodName: "ContentDelete",
			Handler:    _Social_ContentDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social.proto",
}
